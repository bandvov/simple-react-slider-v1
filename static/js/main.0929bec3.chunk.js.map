{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","width","setWidth","height","setHeight","controlsNumber","setControlsNumber","auto","setAuto","buttonStyle","backgroundColor","padding","marginRight","borderRadius","borderColor","borderWidth","style","display","justifyContent","margin","Array","fill","map","_","index","flexDirection","alignItems","onClick","checked","onChange","e","target","type","fontSize","marginLeft","color","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gMA0HeA,MAvHf,WACE,MAA0BC,mBAAS,QAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA4BF,mBAAS,QAArC,mBAAOG,EAAP,KAAeC,EAAf,KACA,EAA4CJ,mBAAS,GAArD,mBAAOK,EAAP,KAAuBC,EAAvB,KACA,EAAwBN,oBAAS,GAAjC,mBAAOO,EAAP,KAAaC,EAAb,KAEMC,EAAc,CAClBC,gBAAiB,cACjBC,QAAS,QACTC,YAAa,QACbX,MAAO,QACPY,aAAc,MACdC,YAAa,OACbC,YAAa,MACb,UAAW,CACTL,gBAAiB,QAGrB,OACE,qCACE,qBACEM,MAAO,CACLb,OAAQ,OACRc,QAAS,OACTC,eAAgB,SAChBP,QAAS,IACTQ,OAAQ,QANZ,SASE,cAAC,IAAD,CAAQZ,KAAMA,EAAMN,MAAOA,EAAOE,OAAQA,EAA1C,SACGiB,MAAMf,GACJgB,KAAKhB,GACLiB,KAAI,SAACC,EAAGC,GACP,OACE,qBACER,MAAO,CACLf,MAAO,OACPS,gBAAiBc,EAAQ,IAAM,EAAI,MAAQ,iBAOzD,sBACER,MAAO,CACLG,OAAQ,OACRF,QAAS,OACTQ,cAAe,SACfC,WAAY,UALhB,UAQE,gCACE,yBAAQV,MAAOP,EAAakB,QAAS,kBAAMzB,EAAS,SAApD,uBACa,OAEb,yBAAQc,MAAOP,EAAakB,QAAS,kBAAMzB,EAAS,SAApD,uBACa,OAEb,yBAAQc,MAAOP,EAAakB,QAAS,kBAAMzB,EAAS,UAApD,wBACc,OAEd,yBAAQc,MAAOP,EAAakB,QAAS,kBAAMzB,EAAS,UAApD,wBACc,UAGhB,uBACA,gCACE,yBAAQc,MAAOP,EAAakB,QAAS,kBAAMvB,EAAU,UAArD,yBACe,OAEf,yBAAQY,MAAOP,EAAakB,QAAS,kBAAMvB,EAAU,SAArD,wBACc,OAEd,yBAAQY,MAAOP,EAAakB,QAAS,kBAAMvB,EAAU,SAArD,wBACc,UAGhB,uBACA,gCACE,yBAAQY,MAAOP,EAAakB,QAAS,kBAAMrB,EAAkB,KAA7D,qBACW,OAEX,yBAAQU,MAAOP,EAAakB,QAAS,kBAAMrB,EAAkB,KAA7D,qBACW,OAEX,yBAAQU,MAAOP,EAAakB,QAAS,kBAAMrB,EAAkB,KAA7D,qBACW,UAGb,uBAEA,kCACE,uBACEU,MAAO,CAAEf,MAAO,OAAQE,OAAQ,QAChCyB,QAASrB,EACTsB,SAAU,SAACC,GACLA,EAAEC,OAAOH,QACXpB,GAAQ,GAERA,GAAQ,IAGZwB,KAAK,aAEP,oBACEhB,MAAO,CACLiB,SAAU,OACVC,WAAY,OACZC,MAAO5B,EAAO,QAAU,IAJ5B,uCChGK6B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.0929bec3.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport Slider from \"simple-react-slider-v1\";\n\nfunction App() {\n  const [width, setWidth] = useState(\"100%\");\n  const [height, setHeight] = useState(\"30vw\");\n  const [controlsNumber, setControlsNumber] = useState(5);\n  const [auto, setAuto] = useState(true);\n\n  const buttonStyle = {\n    backgroundColor: \"transparent\",\n    padding: \".5rem\",\n    marginRight: \".5rem\",\n    width: \"100px\",\n    borderRadius: \"4px\",\n    borderColor: \"blue\",\n    borderWidth: \"1px\",\n    \"&:hover\": {\n      backgroundColor: \"red\",\n    },\n  };\n  return (\n    <>\n      <div\n        style={{\n          height: \"30vw\",\n          display: \"flex\",\n          justifyContent: \"center\",\n          padding: \"0\",\n          margin: \"2rem\",\n        }}\n      >\n        <Slider auto={auto} width={width} height={height}>\n          {Array(controlsNumber)\n            .fill(controlsNumber)\n            .map((_, index) => {\n              return (\n                <div\n                  style={{\n                    width: \"100%\",\n                    backgroundColor: index % 2 === 0 ? \"red\" : \"blue\",\n                  }}\n                ></div>\n              );\n            })}\n        </Slider>\n      </div>\n      <div\n        style={{\n          margin: \"2rem\",\n          display: \"flex\",\n          flexDirection: \"column\",\n          alignItems: \"center\",\n        }}\n      >\n        <div>\n          <button style={buttonStyle} onClick={() => setWidth(\"100%\")}>\n            width 100%{\" \"}\n          </button>\n          <button style={buttonStyle} onClick={() => setWidth(\"50vw\")}>\n            width 50vw{\" \"}\n          </button>\n          <button style={buttonStyle} onClick={() => setWidth(\"200px\")}>\n            width 200px{\" \"}\n          </button>\n          <button style={buttonStyle} onClick={() => setWidth(\"500px\")}>\n            width 500px{\" \"}\n          </button>\n        </div>\n        <hr />\n        <div>\n          <button style={buttonStyle} onClick={() => setHeight(\"100px\")}>\n            height 100px{\" \"}\n          </button>\n          <button style={buttonStyle} onClick={() => setHeight(\"40vh\")}>\n            height 40vh{\" \"}\n          </button>\n          <button style={buttonStyle} onClick={() => setHeight(\"30vw\")}>\n            height 30vw{\" \"}\n          </button>\n        </div>\n        <hr />\n        <div>\n          <button style={buttonStyle} onClick={() => setControlsNumber(10)}>\n            10 items{\" \"}\n          </button>\n          <button style={buttonStyle} onClick={() => setControlsNumber(20)}>\n            20 items{\" \"}\n          </button>\n          <button style={buttonStyle} onClick={() => setControlsNumber(40)}>\n            40 items{\" \"}\n          </button>\n        </div>\n        <hr />\n\n        <label>\n          <input\n            style={{ width: \"1rem\", height: \"1rem\" }}\n            checked={auto}\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n              if (e.target.checked) {\n                setAuto(true);\n              } else {\n                setAuto(false);\n              }\n            }}\n            type=\"checkbox\"\n          />\n          <em\n            style={{\n              fontSize: \"24px\",\n              marginLeft: \"1rem\",\n              color: auto ? \"green\" : \"\",\n            }}\n          >\n            Set auto scroll\n          </em>\n        </label>\n      </div>\n    </>\n  );\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}